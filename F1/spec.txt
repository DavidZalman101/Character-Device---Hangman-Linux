- Introduction to the hangman game:
Hangman is a classic word-guessing game where players try to identify a hidden word one letter at a time. With each incorrect guess,
a part of a stick figure is drawn, representing the gradual construction of a hangman. The objective is to guess the word before the
entire figure is completed.

- An overview of the behaviour of the device:
The opened instance of the device behaves according to its current state.
Different opened instances operate independently. The global state defined by the “init” operation should only be the needed state for
maintaining several running DIs, such as the device global structure.
We will call this instance of the device (DI) from now on.
The possible states are:
	- State A: the state in which the DI is yet to receive the word to be guessed.
	- State B: the state in which the DI is expecting to receive guessed characters.
	- State C: the state in which the game is finished.
While in state A, the first write determines the word to be guessed afterwards; this write changes the DI state to B. The following
writes are processed one character at a time. Each character is treated as a guess. If the guess is correct, the relevant parts of the
word are revealed.
If the guess is wrong another part of the hangman is drawn. The game ends if the full hangman is drawn or if the entire word was
revealed; in such a scenario, the state of the DI is changed to C. In this state character inputs to the DI are not accepted. The DI
only accepts reset signals (which are done using “oictl” as we will discuss afterwards).
At any stage, the user can send an i”octl” system call with 1 (which will be included in the provided header) which will reset the internal
state of the DI as if it was just opened.
The read system call reads the current discovered word along with the current hangman figure in a format that will be defined afterwards.
Whenever a write is done, the read offset pointer is zeroed - the rationale behind it is that the user expects to get the current
total state of the game when he uses the read operation, and it is not meaningful in our case to read from the middle; the current
total state referred to previously is the state of the game regarding the completion of the hangman stick figure alongside the
state of the current guessed word.
In any phase, if EINVAL is returned it means that the total state of the DI did not change following the system call.
- Open system call:
The DI can be opened with read/write options, or even only one of them.

- Close system call:
The driver will free its resources related the related DI. Its use is simply passing the fd as the argument.

- Read system call behaviour:
The user is intended to use the read system call until the read returned 0, which indicates EOF, for him to get the entire state of the DI.
In state A, the user will read the following string "Please enter the word to be guessed\n"
In state B and C, the format of the read characters is:
"
<the current revealed word>
  _______
  |     |
  |     1
  |    324
  |    5 6
  |
__|__
"
The numbers above are the parts of the hangman to be added gradually in an ascending fashion. The following table should explain what each
number should be replaced with:
	1: O
	2: |
	3: /
	4: \
	5: /
	6: \
If a certain part is not drawn it is replaced with a space.
The completed hangman should look like this:
  _______
  |     |
  |     O
  |    /|\
  |    / \
  |
__|__

The current revealed word is in the format: "a*c**" if the word was "abcde" and the characters 'a' and 'c' were guessed correctly. The
character * signifies that the character is hidden.
Be aware that the line beginning with (") in the format above is not included in the actual format. Do not expect a new line before the
current revealed word.
As mentioned before, after a write the offset indicator is reset so the user should expect to read the entire described format from the
start without needing to do a seek operation.
If the read is successful, it returns the number of characters successfully read.

- Write system call behaviour:
In all states, the valid input is a sequence of characters in the range a-z. If the input sent by write system call contains an invalid
character the entire input is not processed and EINVAL error is returned.
In state A, the first write (and by definition the only write) defines the word to be guessed. if the write system call requests writing 0 bytes
then EINVAL is returned since the word cannot be empty.
In state B, the sent characters are processed one character at a time and update the DI internal state accordingly, assuming that the input
is valid. if the write system call requests writing 0 bytes then nothing is done and 0 is returned as the number of bytes written.
In state C, each write system call returns EINVAL.
Note: if in stage B multiple characters were given but in the middle of processing them the state changed to C, then the rest of the input
is ignored, and no error is returned.
- Seek system call:
It operates as if the read object is a normal file in the filesystem - in between writes of course, because each write resets the offset
indicator.
If the write is successful, it returns the number of characters that were relevant to the write operation (the characters not used because
the state of the program turned to C are not counted as written characters).

- “ioctl” system call:
The only valid value to use is 1 which means "reset". This includes the offset indicator. The user can use the reset operation at any stage
of using the DI. Any operation other than the specified 1 is rejected with the error code EINVAL.
If “ioctl” is successful, it returns 0.

- Error codes:
The only relevant error code for our proposed device is EINVAL. Other errors are not directly related to its future implementation. They are
inherent to open, read, write, and close system calls. You can check out these errors in man2.

- Notes for implementation:
The release function should result in freeing the resources related to the opened instance (DI), not the entirety of the device's resources.
The exit function should result in freeing all resources related to the device.
